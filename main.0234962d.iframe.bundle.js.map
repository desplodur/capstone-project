{"version":3,"file":"main.0234962d.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;AAMA;;ACzBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;;;;;;AAQA;;;;;;;;;;;AAaA;;;AAKA","sources":["webpack://react-app/./src/components/QuestionCard/styled.js","webpack://react-app/./src/components/QuestionCard/index.js","webpack://react-app/./src/components/Button/styled.js"],"sourcesContent":["import styled, {css} from 'styled-components';\n\nexport const StyledQuestionComponent = styled.section`\n\tposition: relative;\n\twidth: 90vw;\n\tmargin: 0.5em 0 0.5em 0;\n\tborder: var(--dark);\n\tborder-radius: 8px;\n\tbackground-color: var(--blue);\n\tcolor: var(--light);\n\n\timg#statusIndicator {\n\t\tposition: absolute;\n\t\ttop: 5px;\n\t\tright: 5px;\n\t}\n\n\tbutton#smallEditButton {\n\t\tposition: absolute;\n\t\ttop: 10px;\n\t\tright: 10px;\n\t}\n\n\tbutton#changeStatus {\n\t\tposition: absolute;\n\t\ttop: 50px;\n\t\tright: 10px;\n\t}\n\n\t${props =>\n\t\tprops.ownedQuestion &&\n\t\tcss`\n\t\t\tbackground-color: var(--lightblue);\n\t\t\tcolor: var(--dark);\n\t\t`}\n`;\n\nexport const StyledContent = styled.div`\n\tpadding: 1em 4em 1em 1em;\n`;\n","import {useState} from 'react';\n\nimport {useStore} from '../../hooks/useStore';\nimport AnswerCard from '../AnswerCard';\nimport Button from '../Button';\nimport Form from '../Form';\n\nimport {StyledQuestionComponent} from './styled';\nimport {StyledContent} from './styled';\n\nexport default function QuestionComponent({question, ...props}) {\n\tconst [toggle, setToggle] = useState(true);\n\tconst [showEditQuestionForm, setShowEditQuestionForm] = useState(false);\n\tconst answers = useStore(state => state.answers.data);\n\tconst setQuestion = useStore(state => state.setQuestion);\n\tconst addNewAnswer = useStore(state => state.addNewAnswer);\n\tconst activeUser = useStore(state => state.activeUser);\n\n\tconst addAnswer = event => {\n\t\tevent.preventDefault();\n\t\tconst newAnswer = {\n\t\t\tanswerText: event.target.inputField.value,\n\t\t\tquestionID: question._id,\n\t\t};\n\t\taddNewAnswer(newAnswer);\n\t\tevent.target.reset();\n\t};\n\n\tconst editQuestion = event => {\n\t\tevent.preventDefault();\n\t\tconst newQuestion = question;\n\t\tnewQuestion.questionText = event.target.inputField.value;\n\t\tsetQuestion(question._id, newQuestion);\n\t\tevent.target.reset();\n\t};\n\tconst closeQuestion = () => {\n\t\tconst newQuestion = question;\n\t\tnewQuestion.answered = !question.answered;\n\t\tconsole.log(newQuestion.answered);\n\t\tsetQuestion(question._id, newQuestion);\n\t};\n\n\treturn (\n\t\t<StyledQuestionComponent {...props}>\n\t\t\t<StyledContent>\n\t\t\t\t{showEditQuestionForm ? (\n\t\t\t\t\t<Form\n\t\t\t\t\t\tonSubmit={event => {\n\t\t\t\t\t\t\teditQuestion(event, question.id);\n\t\t\t\t\t\t\tsetShowEditQuestionForm(false);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tplaceholderText={question.questionText}\n\t\t\t\t\t\tsubmitButtonText={'->'}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<h4>{question.questionText}</h4>\n\t\t\t\t)}\n\t\t\t\t{!toggle ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{question.userID === activeUser._id && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tid=\"smallEditButton\"\n\t\t\t\t\t\t\t\t\teditButtonSmall={true}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetShowEditQuestionForm(!showEditQuestionForm);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\t\t\t\t\trole=\"img\"\n\t\t\t\t\t\t\t\t\t\twidth=\"4em\"\n\t\t\t\t\t\t\t\t\t\theight=\"4em\"\n\t\t\t\t\t\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<g\n\t\t\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\t\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\t\t\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeDasharray=\"20\"\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeDashoffset=\"20\"\n\t\t\t\t\t\t\t\t\t\t\t\td=\"M3 21H21\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<animate\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill=\"freeze\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tattributeName=\"stroke-dashoffset\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tdur=\"0.3s\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalues=\"20;0\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</path>\n\t\t\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeDasharray=\"44\"\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeDashoffset=\"44\"\n\t\t\t\t\t\t\t\t\t\t\t\td=\"M7 17V13L17 3L21 7L11 17H7\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<animate\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill=\"freeze\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tattributeName=\"stroke-dashoffset\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tbegin=\"0.4s\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tdur=\"0.6s\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalues=\"44;0\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</path>\n\t\t\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeDasharray=\"8\"\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeDashoffset=\"8\"\n\t\t\t\t\t\t\t\t\t\t\t\td=\"M14 6L18 10\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<animate\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill=\"freeze\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tattributeName=\"stroke-dashoffset\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tbegin=\"1s\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tdur=\"0.2s\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalues=\"8;0\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</path>\n\t\t\t\t\t\t\t\t\t\t</g>\n\t\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tid=\"changeStatus\"\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tcloseQuestion(question.id);\n\t\t\t\t\t\t\t\t\t\tsetToggle(!toggle);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t\t\t\t\t!question.answered\n\t\t\t\t\t\t\t\t\t\t\t\t? require('../../utils/icons/check.svg').default\n\t\t\t\t\t\t\t\t\t\t\t\t: require('../../utils/icons/unCheck.svg').default\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\talt={!question.answered ? 'Open' : 'Closed'}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<article>\n\t\t\t\t\t\t\t{answers.map(answer => {\n\t\t\t\t\t\t\t\tif (question._id === answer.questionID) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<AnswerCard key={answer._id}>\n\t\t\t\t\t\t\t\t\t\t\t{answer.answerText}\n\t\t\t\t\t\t\t\t\t\t</AnswerCard>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</article>\n\t\t\t\t\t\t<article>\n\t\t\t\t\t\t\t<Form\n\t\t\t\t\t\t\t\tonSubmit={event => {\n\t\t\t\t\t\t\t\t\taddAnswer(event);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tplaceholderText=\"Type in your answer...\"\n\t\t\t\t\t\t\t\tsubmitButtonText={'->'}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</article>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<img\n\t\t\t\t\t\tid=\"statusIndicator\"\n\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t!question.answered\n\t\t\t\t\t\t\t\t? require('../../utils/icons/statusOpen.svg').default\n\t\t\t\t\t\t\t\t: require('../../utils/icons/statusClosed.svg').default\n\t\t\t\t\t\t}\n\t\t\t\t\t\talt={!question.answered ? 'Open' : 'Closed'}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</StyledContent>\n\n\t\t\t<Button\n\t\t\t\tgreyButton={true}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetToggle(!toggle);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{toggle ? 'Show answers' : 'Hide answers'}\n\t\t\t</Button>\n\t\t</StyledQuestionComponent>\n\t);\n}\n","import styled, {css} from 'styled-components';\n\nconst StyledButton = styled.button`\n\tborder: none;\n\tbackground-color: transparent;\n\tcolor: var(--light);\n\t${props =>\n\t\tprops.submitButton &&\n\t\tcss`\n\t\t\theight: 100%;\n\t\t\tborder: 2px solid var(--dark);\n\t\t\tborder-radius: 0 5px 5px 0;\n\t\t\tbackground-color: var(--dark);\n\t\t`}\n\t${props =>\n\t\tprops.greyButton &&\n\t\tcss`\n\t\t\twidth: 100%;\n\t\t\tpadding: 0.5em 0 0.5em 0;\n\t\t\tfont-size: 1.2rem;\n\t\t\tborder-radius: 0 0 8px 8px;\n\t\t\tbackground-color: var(--dark);\n\t\t\t:hover {\n\t\t\t\tbackground-color: var(--darktHover);\n\t\t\t}\n\t\t`}\n\t\n\t${props =>\n\t\tprops.editButtonSmall &&\n\t\tcss`\n\t\t\tfont-size: 0.4rem;\n\t\t`}\n\t\t\t${props =>\n\t\tprops.editButtonBig &&\n\t\tcss`\n\t\t\tfont-size: 1rem;\n\t\t\tcolor: var(--dark);\n\t\t`}\n`;\nexport default StyledButton;\n"],"names":[],"sourceRoot":""}